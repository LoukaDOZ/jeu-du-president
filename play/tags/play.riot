<play>
    <div class="container-fluid m-0 p-0 row my-h-full-screen overflow-hidden" style="font-size: 2vw;">
        <div id="doRevolution" class="modal fade">
            <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                <div class="modal-content">
                    <!-- Modal head -->
                    <div class="modal-header">
                        <h5 class="modal-title font-weight-bold">Faire révolution ?</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                            onclick="{ revolutionFalse }">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <!-- Modal footer -->
                    <div class="modal-footer justify-content-center">
                        <button type="button" class="btn btn-outline-danger mr-2" data-dismiss="modal" aria-label="Close"
                            onclick="{ revolutionFalse }">
                            Non
                        </button>
                        <button type="button" class="btn btn-outline-primary" data-dismiss="modal" aria-label="Close"
                             onclick="{ revolutionTrue }">
                            Oui
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-4 p-0 my-h-100pc border border-dark">
            <div each="{ (player,index) in props.game.players }" style="height: calc(100%/8);"
                    class="container-fluid m-0 p-0 row text-nowrap border border-dark border-right-0
                    { player.pid === props.pid ? 'bg-secondary text-white' : 'bg-white' }">

                <div class="col-1 m-0 p-0 d-flex justify-content-center align-items-center my-h-100pc my-w-100pc">
                    <svg if="{ player.pid === props.game.turn }" class="bi bi-caret-right-fill text-warning my-h-50pc my-w-100pc" width="100%" height="100%" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 011.659-.753l5.48 4.796a1 1 0 010 1.506z"/>
                    </svg>
                </div>
                <div class="col-3 my-h-100pc my-font-0-5em">
                    <div class="d-flex justify-content-center align-items-center font-weight-bold my-font-1em"
                         style="height: calc(100% / 3);">
                        { player.name }
                    </div>
                    <div class="d-flex justify-content-center align-items-center my-font-1-2em"
                         style="height: calc(100% / 3);">
                        { getRank(player[PREVIOUS_RANK],props.game[PREVIOUS_PLAYERS_COUNT]) }
                    </div>
                    <div class="d-flex justify-content-center align-items-center my-font-1-2em"
                         style="height: calc(100% / 3);">
                        { player.score } points
                    </div>
                </div>
                <div if="{ player.cards.length > 0 }" id="deck{ player.pid }"
                     class="col-8 d-flex align-items-center justify-content-center my-h-100pc">
                    <deck cards="{ player.cards }" hide="{ true }" parent="deck{ player.pid }"
                          hratio="0.8" wratio="0.6" max="26"/>
                    <div class="container-fluid position-absolute text-center"
                         if="{ player.fold }">
                        <div class="badge badge-danger my-font-1em">
                            Couché
                        </div>
                    </div>
                </div>
                <div class="col-8 d-flex align-items-center justify-content-center my-h-100pc my-font-1em
                            { player.pid === props.pid ? 'text-white' : 'text-primary' }"
                     if="{ player.cards.length <= 0 }">
                    <svg class="bi bi-award" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M9.669.864L8 0 6.331.864l-1.858.282-.842 1.68-1.337 1.32L2.6 6l-.306 1.854 1.337 1.32.842 1.68 1.858.282L8 12l1.669-.864 1.858-.282.842-1.68 1.337-1.32L13.4 6l.306-1.854-1.337-1.32-.842-1.68L9.669.864zm1.196 1.193l-1.51-.229L8 1.126l-1.355.702-1.51.229-.684 1.365-1.086 1.072L3.614 6l-.25 1.506 1.087 1.072.684 1.365 1.51.229L8 10.874l1.356-.702 1.509-.229.684-1.365 1.086-1.072L12.387 6l.248-1.506-1.086-1.072-.684-1.365z" clip-rule="evenodd"/>
                        <path d="M4 11.794V16l4-1 4 1v-4.206l-2.018.306L8 13.126 6.018 12.1 4 11.794z"/>
                    </svg>
                    { ' '+ getRank(player.rank,props.game.players.length) }
                </div>
            </div>
        </div>
        <div class="col-8 p-0 my-h-100pc">
            <div class="container-fluid m-0 p-0 my-h-40pc border border-dark">
                <div class="container-fluid m-0 p-0 my-h-20pc row my-font-0-8em">
                    <div class="col-4 p-1 my-h-100pc">
                        <div class="container-fluid my-h-100pc text-white bg-primary d-flex align-items-center justify-content-center">
                            { previousStack.length > 1 ? 'Dernières cartes' : 'Derniere carte' }
                        </div>
                    </div>
                    <div class="col-8 p-1 my-h-100pc">
                        <div class="container-fluid my-h-100pc text-white bg-primary d-flex align-items-center justify-content-center">
                            Pile
                        </div>
                    </div>
                </div>
                <div class="container-fluid m-0 p-0 my-h-80pc row">
                    <div class="col-4 p-1 my-h-100pc">
                        <div id="previousStack" class="my-h-100pc text-nowrap d-flex align-items-center justify-content-center bg-primary">
                            <deck cards="{ previousStack }" parent="previousStack" hratio="0.6" wratio="0.6"
                                  max="{ previousStack.length + 1 }"
                                  hoverablefunction="{ previousStackHoverableFunction }"
                                  focusablefunction="{ previousStackFocusableFunction }"
                                  focusedfunction="{ previousStackFocusedFunction }"
                                  disabledfunction="{ previousStackDisabledFunction }"/>
                        </div>
                    </div>
                    <div class="col-8 p-1 my-h-100pc">
                        <div id="stackCards" class="my-h-100pc text-nowrap d-flex align-items-center justify-content-center bg-primary">
                            <stack cards="{ stack }" parent="stackCards" hratio="0.6" wratio="0.6" amount="{ props.game.amount }"/>
                        </div>
                    </div>
                </div>
            </div>
            <div class="container-fluid row m-0 p-0 d-flex align-items-center justify-content-center my-h-30pc border border-dark">
                <div class="col-9 p-1 my-h-100pc d-flex align-items-center justify-content-center border-right border-dark my-font-1-7em">
                    <div if="{ props.game.turn !== props.pid }" class="my-font-1em text-center">
                        { props.game.players[props.game.turn].name } est en train de jouer
                    </div>
                    <div if="{ props.game.turn === props.pid }" class="container-fluid p-0 m-0 text-center my-h-100pc">
                        <div class="container-fluid m-0 p-0 d-flex align-items-center justify-content-center my-h-50pc">
                            <div class="my-font-1em">A toi de jouer</div>
                        </div>
                        <div class="container-fluid m-0 p-0 d-flex align-items-center justify-content-center my-h-50pc">
                            <loadbutton btype="button" value="Poser { props.selected.length > 1 ? 'ces cartes' : 'cette carte' }"
                                onclicked="{ props.put }"
                                disabled="{ (props.game.amount > 0 && props.selected.length !== props.game.amount)
                                            || (props.game.amount <= 0 && props.selected.length <= 0)
                                            || props.game.players[props.pid].revolution }"
                                reason="{ props.game.players[props.pid].revolution ? 'Choississez de faire révolution ou non'
                                                                                   : 'Selectionnez plus de cartes' }"/>
                            <loadbutton btype="button" value="Passer son tour" onclicked="{ props.pass }"
                                if="{ props.game.sequence > 0 }"
                                disabled="{ props.game.players[props.pid].revolution }" reason="Choississez de faire révolution ou non" />
                            <loadbutton btype="button" value="Se coucher" onclicked="{ props.fold }"
                                disabled="{ props.game.players[props.pid].revolution }" reason="Choississez de faire révolution ou non"/>
                        </div>
                    </div>
                </div>
                <div class="col-3 p-0 my-h-100pc border-left border-dark my-font-0.8em">
                    <div class="container-fluid m-0 p-sm-1 p-md-1 p-lg-2 p-xl-2
                    d-flex align-items-center justify-content-center my-font-1em"
                         style="height: calc(100% / 3);" if="{ props.game.amount > 0 }">
                        <div class="badge badge-primary my-badge-font-size my-h-100pc my-w-100pc d-flex align-items-center justify-content-center">
                            <svg class="bi bi-file-arrow-down mr-2" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M4 1h8a2 2 0 012 2v10a2 2 0 01-2 2H4a2 2 0 01-2-2V3a2 2 0 012-2zm0 1a1 1 0 00-1 1v10a1 1 0 001 1h8a1 1 0 001-1V3a1 1 0 00-1-1H4z" clip-rule="evenodd"/>
                                <path fill-rule="evenodd" d="M4.646 8.146a.5.5 0 01.708 0L8 10.793l2.646-2.647a.5.5 0 01.708.708l-3 3a.5.5 0 01-.708 0l-3-3a.5.5 0 010-.708z" clip-rule="evenodd"/>
                                <path fill-rule="evenodd" d="M8 4a.5.5 0 01.5.5v6a.5.5 0 01-1 0v-6A.5.5 0 018 4z" clip-rule="evenodd"/>
                            </svg>
                            { props.game.amount } { props.game.amount > 1 ? 'cartes' : 'carte' }
                        </div>
                    </div>
                    <div class="container-fluid m-0 p-sm-1 p-md-1 p-lg-2 p-xl-2
                    d-flex align-items-center justify-content-center my-font-1em"
                         style="height: calc(100% / 3);" if="{ props.game.sequence > 0 }">
                        <div class="badge badge-primary my-badge-font-size my-h-100pc my-w-100pc d-flex align-items-center justify-content-center">
                            <svg class="bi bi-exclamation-triangle mr-2" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M7.938 2.016a.146.146 0 00-.054.057L1.027 13.74a.176.176 0 00-.002.183c.016.03.037.05.054.06.015.01.034.017.066.017h13.713a.12.12 0 00.066-.017.163.163 0 00.055-.06.176.176 0 00-.003-.183L8.12 2.073a.146.146 0 00-.054-.057A.13.13 0 008.002 2a.13.13 0 00-.064.016zm1.044-.45a1.13 1.13 0 00-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566z" clip-rule="evenodd"/>
                                <path d="M7.002 12a1 1 0 112 0 1 1 0 01-2 0zM7.1 5.995a.905.905 0 111.8 0l-.35 3.507a.552.552 0 01-1.1 0L7.1 5.995z"/>
                            </svg>
                            { props.game.sequence === 11 ? 'Valet ' : '' }
                            { props.game.sequence === 12 ? 'Reine ' : '' }
                            { props.game.sequence === 13 ? 'Roi ' : '' }
                            { props.game.sequence === 1 ? 'As ' : '' }
                            { props.game.sequence < 11 && props.game.sequence > 1 ? props.game.sequence + ' ' : '' }
                            ou rien
                        </div>
                    </div>
                    <div class="container-fluid m-0 p-sm-1 p-md-1 p-lg-2 p-xl-2
                    d-flex align-items-center justify-content-center my-font-1em"
                         style="height: calc(100% / 3);" if="{ props.game.revolution }">
                        <div class="badge badge-primary my-badge-font-size my-h-100pc my-w-100pc d-flex align-items-center justify-content-center">
                            <svg class="bi bi-arrow-repeat mr-2" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M2.854 7.146a.5.5 0 00-.708 0l-2 2a.5.5 0 10.708.708L2.5 8.207l1.646 1.647a.5.5 0 00.708-.708l-2-2zm13-1a.5.5 0 00-.708 0L13.5 7.793l-1.646-1.647a.5.5 0 00-.708.708l2 2a.5.5 0 00.708 0l2-2a.5.5 0 000-.708z" clip-rule="evenodd"/>
                                <path fill-rule="evenodd" d="M8 3a4.995 4.995 0 00-4.192 2.273.5.5 0 01-.837-.546A6 6 0 0114 8a.5.5 0 01-1.001 0 5 5 0 00-5-5zM2.5 7.5A.5.5 0 013 8a5 5 0 009.192 2.727.5.5 0 11.837.546A6 6 0 012 8a.5.5 0 01.501-.5z" clip-rule="evenodd"/>
                            </svg>
                            Révolution
                        </div>
                    </div>
                </div>
            </div>
            <div id="ownCards"
                 class="container-fluid m-0 p-0 d-flex align-items-center justify-content-center my-h-30pc border border-dark bg-primary">
                <deck cards="{ ownCards }" parent="ownCards" hratio="0.8" wratio="0.6" max="26"
                      hide="{ props.game.players[props.pid].fold }" if="{ ownCards.length > 0 }"
                      onselect="{ props.onselect }" ondeselect="{ props.ondeselect }"
                      hoverablefunction="{ hoverableFunction }" focusablefunction="{ focusableFunction }"
                      focusedfunction="{ focusedFunction }" disabledfunction="{ disabledFunction }"/>
                <div class="container-fluid position-absolute text-center my-font-1-5em"
                     if="{ props.game.players[props.pid].fold }">
                    <div class="badge badge-danger my-font-1em">
                        Couché
                    </div>
                </div>
                <div class="m-0 p-0 text-white my-font-2em" if="{ ownCards.length <= 0 }">
                    <svg class="bi bi-award" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M9.669.864L8 0 6.331.864l-1.858.282-.842 1.68-1.337 1.32L2.6 6l-.306 1.854 1.337 1.32.842 1.68 1.858.282L8 12l1.669-.864 1.858-.282.842-1.68 1.337-1.32L13.4 6l.306-1.854-1.337-1.32-.842-1.68L9.669.864zm1.196 1.193l-1.51-.229L8 1.126l-1.355.702-1.51.229-.684 1.365-1.086 1.072L3.614 6l-.25 1.506 1.087 1.072.684 1.365 1.51.229L8 10.874l1.356-.702 1.509-.229.684-1.365 1.086-1.072L12.387 6l.248-1.506-1.086-1.072-.684-1.365z" clip-rule="evenodd"/>
                        <path d="M4 11.794V16l4-1 4 1v-4.206l-2.018.306L8 13.126 6.018 12.1 4 11.794z"/>
                    </svg>
                    Tu es
                    <span class="text-lowercase my-font-1em">
                        { ' '+ getRank(props.game.players[props.pid][RANK],props.game.players.length) }
                    </span>
                </div>
            </div>
        </div>
    </div>

    <script>
        export default {
            ownCards: [],
            previousStack: [],
            stack: [],
            count: {
                "count": [],
                "reset": function () {
                    this.count = {1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0};
                }
            },
            RANK: RANK,
            PREVIOUS_RANK: PREVIOUS_RANK,
            PREVIOUS_PLAYERS_COUNT: PREVIOUS_PLAYERS_COUNT,
            onBeforeActions(){
                this.stack = this.props.game.stack;
                this.previousStack = this.props.game[PREVIOUS_CARDS_PUT];
                this.ownCards = this.props.game.players[this.props.pid].cards;

                this.count.reset();
                for(card of this.ownCards)
                    this.count.count[card.number]++;
            },
            onBeforeMount(){
                this.onBeforeActions();
            },
            onBeforeUpdate(){
                this.onBeforeActions();
            },
            onUpdated(){
                if(this.props.game.players[this.props.pid].revolution)
                    $('#doRevolution').modal('toggle');
            },
            revolutionTrue(e){
                e.preventDefault();
                this.props.revolution(true);
            },
            revolutionFalse(e){
                e.preventDefault();
                this.props.revolution(false);
            },
            getRank(rank,playerCount){
                return translateRankName(rankName(rank,playerCount));
            },
            isSelected(card){
                if(!this.props.selected)
                    return false;

                for(let select of this.props.selected) {
                    if (select.type === card.type && select.number === card.number)
                        return true;
                }
                return false;
            },
            hoverableFunction(card){
                return !this.isSelected(card);
            },
            focusableFunction(card){
                return (
                    !this.isSelected(card) && this.props.pid === this.props.game.turn
                );
            },
            focusedFunction(card){
                return this.isSelected(card);
            },
            disabledFunction(card){
                return (
                    !this.isSelected(card) && !this.props.game.players[this.props.pid].fold
                    && ((this.props.selected.length > 0 && this.props.selected[0].number !== card.number)
                        || (this.stack.length > 0
                            && compareCards(card.number,this.stack[this.stack.length - 1].number,this.props.game.revolution) < 0)
                        || (this.props.game.amount > 0 && this.count.count[card.number] < this.props.game.amount)
                        || (this.props.game.amount > 0 && this.props.selected.length >= this.props.game.amount)
                        || (this.props.game.sequence > 0 && card.number !== this.props.game.sequence))
                );
            },
            previousStackHoverableFunction(card){
                return true;
            },
            previousStackFocusableFunction(card){
                return false;
            },
            previousStackFocusedFunction(card){
                return false;
            },
            previousStackDisabledFunction(card){
                return false;
            }
        }
    </script>
</play>